var util = require('util');
var OAuth2Strategy = require('passport-oauth2');
var InternalOAuthError = require('passport-oauth2').InternalOAuthError;

// Custom error classes
function LinkedInAPIError(message, code) {
  Error.call(this);
  this.name = 'LinkedInAPIError';
  this.message = message;
  this.code = code;
  Error.captureStackTrace(this, arguments.callee);
}

function UserInfoError(message, type) {
  Error.call(this);
  this.name = 'UserInfoError';
  this.message = message;
  this.type = type;
  Error.captureStackTrace(this, arguments.callee);
}

var profileUrl = 'https://api.linkedin.com/v2/userinfo';

function Strategy(options, verify) {
  options = options || {};
  options.authorizationURL =
    options.authorizationURL ||
    'https://www.linkedin.com/oauth/v2/authorization';
  options.tokenURL =
    options.tokenURL || 'https://www.linkedin.com/oauth/v2/accessToken';
  options.scope = options.scope || ['profile', 'email', 'openid'];

  // Enable state parameter by default
  options.state = options.state !== undefined ? options.state : true;

  // Set OAuth2 parameters for refresh token
  if (!options.authorizationParams) {
    options.authorizationParams = {};
  }
  options.authorizationParams.access_type = 'offline';

  //By default we want data in JSON
  options.customHeaders = options.customHeaders || {
    'x-li-format': 'json',
    'Content-Type': 'application/x-www-form-urlencoded'
  };

  OAuth2Strategy.call(this, options, verify);

  this.options = options;
  this.name = 'linkedin';
  this.profileUrl = profileUrl;

  // Override getOAuthAccessToken to properly handle refresh tokens
  const oauth2 = this._oauth2;
  const oldGetOAuthAccessToken = oauth2.getOAuthAccessToken.bind(oauth2);
  oauth2.getOAuthAccessToken = function(code, params, callback) {
    return oldGetOAuthAccessToken(code, params, function(err, accessToken, refreshToken, results) {
      if (err) {
        return callback(err);
      }
      callback(null, accessToken, refreshToken, results);
    });
  };
}

util.inherits(Strategy, OAuth2Strategy);

Strategy.prototype.userProfile = function (accessToken, done) {
  //LinkedIn uses a custom name for the access_token parameter
  this._oauth2.setAccessTokenName('oauth2_access_token');

  this._oauth2.get(
    this.profileUrl,
    accessToken,
    function (err, body, res) {
      var json;
      
      if (err) {
        if (err.data) {
          try {
            json = JSON.parse(err.data);
          } catch (_) {}
        }
        
        if (json && json.error && json.error.message) {
          return done(new LinkedInAPIError(json.error.message, json.error.status));
        } else if (json && json.error && json.error_description) {
          return done(new UserInfoError(json.error_description, json.error));
        }
        return done(new InternalOAuthError('Failed to fetch user profile', err));
      }

      try {
        json = JSON.parse(body);
      } catch (ex) {
        return done(new Error('Failed to parse user profile'));
      }

      var profile = parseProfile(json);
      profile._raw = body;
      profile._json = json;

      done(null, profile);
    }.bind(this)
  );
};

Strategy.prototype.authorizationParams = function (options) {
  var params = {};

  // LinkedIn requires state parameter
  if (options.state) {
    params['state'] = options.state;
  }

  // Support for refresh tokens
  if (options.accessType) {
    params['access_type'] = options.accessType;
  }

  // Support for forcing approval prompt
  if (options.prompt) {
    params['prompt'] = options.prompt;
  }

  // Support for login hint
  if (options.loginHint) {
    params['login_hint'] = options.loginHint;
  }

  return params;
};

function parseProfile(body) {
  return {
    provider: 'linkedin',
    id: body.sub,
    email: body.email,
    givenName: body.given_name,
    familyName: body.family_name,
    displayName: `${body.given_name} ${body.family_name}`,
    picture: body.picture,
    // Additional profile fields when available
    headline: body.headline,
    profileUrl: body.profileUrl,
    industry: body.industry,
    location: body.location,
    positions: body.positions,
    publicProfileUrl: body.publicProfileUrl,
    _raw: JSON.stringify(body),
    _json: body
  };
}

// Export error classes
Strategy.LinkedInAPIError = LinkedInAPIError;
Strategy.UserInfoError = UserInfoError;

module.exports = Strategy;
